#include <stdint.h>
#include <oled.h>
#include <SPI.h>
#include <Wire.H>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

using namespace std;

Adafruit_SSD1306 display(9, 10, 11, 12, 13);

const unsigned char hot [] = {
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x1F, 0x07, 0x03, 0x01, 0x01,
0x01, 0x01, 0x03, 0x07, 0x1F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x1F, 0x07, 0x01, 0x40, 0xC0, 0x80, 0x00, 0x00, 0x40,
0xC0, 0x80, 0x00, 0x00, 0x40, 0xC0, 0x81, 0x07, 0x1F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0x7F, 0x1F, 0x07, 0x01, 0x00, 0x00, 0xC0, 0xF0, 0xFC, 0x1F, 0x07, 0xC1, 0xF0, 0xFC,
0x1F, 0x07, 0xC1, 0xF0, 0xFC, 0x1F, 0x07, 0x01, 0x00, 0x00, 0x01, 0x07, 0x1F, 0x7F, 0xFF, 0xFF,
0xFF, 0xC1, 0x80, 0x80, 0x80, 0x80, 0x80, 0x98, 0x98, 0x99, 0x99, 0x99, 0x98, 0x98, 0x99, 0x99,
0x99, 0x98, 0x98, 0x99, 0x99, 0x99, 0x98, 0x98, 0x98, 0x80, 0x80, 0x80, 0x80, 0x80, 0xC1, 0xFF
};

const unsigned char error_bmp [] = {
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x0F, 0x07, 0x83, 0x83,
0x83, 0x83, 0x07, 0x0F, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x1F, 0x07, 0x03, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF,
0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x03, 0x07, 0x1F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0x7F, 0x1F, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xCF, 0xCF,
0xCF, 0xCF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x1F, 0x7F, 0xFF, 0xFF,
0xFF, 0xE1, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC7, 0xCF, 0xCF,
0xCF, 0xCF, 0xC7, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xE1, 0xFF
};

const unsigned char power [] = {
0xFF, 0xFF, 0xFF, 0x07, 0xF3, 0xF3, 0xF3, 0x07, 0xFF, 0xE7, 0xE7, 0xE7, 0xE7, 0xFF, 0xFF, 0xFF,
0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xBD, 0xBD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00,
0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xF7, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF,
0xFF, 0x00, 0xFF, 0xDE, 0xDE, 0xDF, 0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00,
0xFF, 0x7B, 0x7B, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xEF,
0xEF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x00, 0x3F, 0x3F, 0x3F, 0x00, 0xFF, 0x9D, 0x9D, 0x9F,
0x9F, 0xFF, 0x3F, 0x3F, 0x20, 0x20, 0x2F, 0x25, 0x22, 0x20, 0x35, 0x35,
};

const unsigned char temp [] = {
0xFF, 0xE7, 0xE7, 0xE7, 0xE7, 0xFF, 0x07, 0xF3, 0xF3, 0xF3, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xBD, 0xBD, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF7,
0xF7, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xDF, 0xDF, 0xDE, 0xDE, 0xFF,
0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7B, 0x7B, 0xFF, 0x00, 0xFF,
0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xEF, 0xEF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF,
0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x9F, 0x9F, 0x9D, 0x95, 0xF3, 0x00, 0x3F, 0x3F, 0x3F, 0x00, 0x03,
0x07, 0xFF, 0x3F, 0x3F, 0x3F, 0x3F, 0x38, 0x30, 0x20, 0x21, 0x2F, 0x21,
};

const unsigned char docked [] = {
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x0F, 0x07, 0x03, 0x03,
0x63, 0x83, 0x07, 0x0F, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x1F, 0x07, 0x03, 0x00, 0x00, 0x80, 0x60, 0x10, 0x08,
0x06, 0x81, 0x80, 0xC0, 0xE0, 0xF0, 0xE3, 0x47, 0x1F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0x7F, 0x1F, 0x07, 0x01, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE1, 0xE2, 0xF0, 0xF8,
0xFC, 0xEE, 0xE7, 0x83, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x1F, 0x7F, 0xFF, 0xFF,
0xFF, 0xE1, 0xC0, 0xC0, 0xC0, 0xC0, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF,
0xCF, 0xCF, 0xCF, 0xC1, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xE1, 0xFF
};

oled::oled(){
  celcius = true;
  temp(0);
  target(0);
  power(0);
  hot = false;
  docked = false;
  idle = false;
  error = false;
  ready = false;

}

oled::~oled(){

}

void oled::layout(){
  display.clearDisplay();
  display.drawBitmap(32, 16, error_bmp, 32, 32, 1);
  display.display();
}

void oled::update(){

}

void oled::restart(){
  oled(); //reset status bits & values
  layout(); // redraw gui
  update();
}

void oled::temp(uint8_t temp){
  d_temp = temp;
}

void oled::target(uint8_t target){
  d_target = target;
}

void oled::power(uint8_t power){
  d_power = power;
}

void oled::status(char status, bool value){
  switch (status) {
    case 'r': ready = value;
      break;
    case 'i': idle = value;
      break;
    case 'd': docked = value;
      break;
    case 'h': hot = value;
      break;
    case 'e': error = value;
      break;
    case 'c': celcius = value;
      break;
    default: error = true;
      break;
  }
}
